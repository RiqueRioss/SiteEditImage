/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-05-28 16:16:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Menu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Menu</title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/styleMenu.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("    \n");
      out.write("        <div class=\"column column-left\">\n");
      out.write("            <h2>Sua Imagem</h2>\n");
      out.write("            <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${imagePath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"Processed Image\" /><br>\n");
      out.write("            <h3>Texto Identificado</h3>\n");
      out.write("            <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ocrResult}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <div class=\"column column-center\">\n");
      out.write("            <h3>Procurar Texto</h3>\n");
      out.write("            <form action=\"OCRServlet\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("                <input type=\"file\" name=\"image\" accept=\"image/*\" required />\n");
      out.write("                <button type=\"submit\">Identificar Texto</button>\n");
      out.write("            </form>\n");
      out.write("            \n");
      out.write("            <br><br><br><br><br><br>\n");
      out.write("            <h3>Aplicar Marca d'água</h3>\n");
      out.write("            <form action=\"MarcaServlet\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("                <p>Imagem</p>\n");
      out.write("                <input type=\"file\" name=\"image\" accept=\"image/*\" required /> <br>\n");
      out.write("                <p>Marca D'água</p>\n");
      out.write("                <input type=\"file\" name=\"marcadagua\" accept=\"image/*\" required />\n");
      out.write("                <button type=\"submit\">Aplicar Marca D'água</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <div class=\"column column-right\">\n");
      out.write("            <h3>Alterar Tamanho da Imagem</h3>\n");
      out.write("            <form action=\"TamanhoServlet\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("                <input type=\"file\" name=\"image\" accept=\"image/*\" required />\n");
      out.write("                <input type=\"number\" name=\"width\" placeholder=\"Largura\" required>\n");
      out.write("                <input type=\"number\" name=\"height\" placeholder=\"Altura\" required>\n");
      out.write("                <button type=\"submit\">Proceder</button>\n");
      out.write("            </form>\n");
      out.write("\n");
      out.write("            <h3>Aplicar um Filtro</h3>\n");
      out.write("            <form action=\"FiltroServlet\" method=\"post\" enctype=\"multipart/form-data\">\n");
      out.write("                <input type=\"file\" name=\"image\" accept=\"image/*\" required /><br>\n");
      out.write("                <div class=\"radio-group\">\n");
      out.write("                    <input type=\"radio\" name=\"opcao\" value=\"1\" required> Tons de Cinza<br>\n");
      out.write("                    <input type=\"radio\" name=\"opcao\" value=\"2\" required> Negativo<br>\n");
      out.write("                    <input type=\"radio\" name=\"opcao\" value=\"3\" required> Binarizar\n");
      out.write("                    <input type=\"number\" name=\"limiar\" min=\"0\" max=\"254\" placeholder=\"Limiar da Binarização\"><br>\n");
      out.write("                    <input type=\"radio\" name=\"opcao\" value=\"4\" required> Remover Ruído<br>\n");
      out.write("                    <input type=\"radio\" name=\"opcao\" value=\"5\" required> Adicionar Brilho\n");
      out.write("                    <input type=\"number\" name=\"brilho\" placeholder=\"Valor adicional de Brilho\"><br>\n");
      out.write("                </div>\n");
      out.write("                <button type=\"submit\">Proceder</button>\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <script>\n");
      out.write("        function performOperation(operation) {\n");
      out.write("            var formData = new FormData();\n");
      out.write("            if (operation === 'ocr') {\n");
      out.write("                formData.append('image', $('#textImage')[0].files[0]);\n");
      out.write("            } else if (operation === 'marca') {\n");
      out.write("                formData.append('image', $('#watermarkImage')[0].files[0]);\n");
      out.write("                formData.append('marcadagua', $('#watermark')[0].files[0]);\n");
      out.write("            }\n");
      out.write("            formData.append('operation', operation);\n");
      out.write("\n");
      out.write("            $.ajax({\n");
      out.write("                url: operation,\n");
      out.write("                type: 'POST',\n");
      out.write("                data: formData,\n");
      out.write("                processData: false,\n");
      out.write("                contentType: false,\n");
      out.write("                success: function(response) {\n");
      out.write("                    $('#processedImage').attr('src', response.processedImage);\n");
      out.write("                    if (response.ocrResult) {\n");
      out.write("                        $('p').text(response.ocrResult);\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                error: function(xhr, status, error) {\n");
      out.write("                    console.log('Erro na requisição AJAX:', error);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("    \n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
